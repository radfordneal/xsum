APPLICATION PROGRAM INTERFACE TO EXACT SUMMATION FUNCTIONS.

Copyright 2015, 2018, 2021 Radford M. Neal

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


This is a guide to how to use the 'xsum' package for exact summation
from a C program.

The 'xsum' package implements exact summation of double-precision
(IEEE) floating-point numbers, with the exact sum stored in a
"superaccumulator".  

Both "small" and "large" superaccumulators are implemented, with the
large superaccumulator being more efficient when many (more than about
1000) numbers are being summed at one time, whereas the small
superaccumulator is more efficient when fewer numbers are summed.

The exact sum in a superaccumulator can be used to produce a
double-precision rounded result, which is the exactly-correct rounding
(to nearest, ties to even) of the exact sum.  See the paper in
xsum-paper.pdf (also at https://arxiv.org/abs/1505.05571) for more
details.


How to build with the xsum package.

Declarations required for use of 'xsum' are in the xsum.h file, which
should be included in C modules that use the functions.  The functions
themselves are in xsum.c, which should be compiled and linked with the
application program.  There are various options that can be set in
xsum.c, which may affect performance with a given processor and
compiler, but the settings in the released version should be adequate.


Superaccumulator declaration and initialization.

Small and large superaccumulators are represented by the following C
structure types:

  xsum_small_accumulator
  xsum_large_accumulator

Space for values of these types may be allocated by just declaring
variables of one of these types, or by using 'calloc'.  No special
action is required to free space used by an superaccumulator - the
space is freed when the variable's scope is left, or when 'free' is
called on a pointer obtained from 'calloc'.

A superaccumulator should not be used until it has been initialized
with one of the following procedures:

  xsum_small_init (pointer_to_small_accumulator)
  xsum_large_init (pointer_to_large_accumulator)

These routines set the value stored in the superaccumulator to zero.
If desired, the initialization routine can be called later to reset
the value back to zero.


Adding to a superaccumulator.

After initialization, double-precision floating-point values can be
added to a small or large superaccumulator using one of the following
procedures:

  xsum_small_add1 (pointer_to_small_accumulator, value)
  xsum_large_add1 (pointer_to_large_accumulator, value)

  xsum_small_addv (pointer_to_small_accumulator, array, length)
  xsum_large_addv (pointer_to_large_accumulator, array, length)

The '...add1' procedures add a single double-precision value to the
given small or large superaccumulator.  The '...addv' procedures add
the elements in an array of double-precision values, with length given
by 'length'.  Adding many values with '...addv' is much faster than
calling '...add1' repeatedly.

The dot product of two vectors can be added to a superaccumulator
with one of the following procedures:

  xsum_small_add_dot (pointer_to_small_accmulator, array1, arry2, length)
  xsum_large_add_dot (pointer_to_large_accmulator, array1, arry2, length)

Here, 'array1' and 'array2' are pointers to double arrays, which must
both have at least 'length' elements.  The products of corresponding
elements of 'array1' and 'array2' are added to the accumulator.  Note
that the products are computed with ordinary IEEE floating-point
arithmetic, hence are not necessarily exact, so the final sum added
may not be the exact vector dot product (but is the exact sum of the
rounded products).

The squared norm of a vector (dot product of it with itself) can be
added to a superaccumulator with one of the following procedures:

  xsum_small_add_sqnorm (pointer_to_small_accumulator, array, length)
  xsum_large_add_sqnorm (pointer_to_large_accumulator, array, length)

The squares of the elements of the double array are added to the
accumulator.  The squares are computed with IEEE floating-point
arithmetic, and so may not be exact, though the sum added to the
accumulator is the exact sum of these rounded squares.


Obtaining a rounded value from a superaccumulator.

After adding values to a superaccumulator, the correct rounding of the
value it contains to a double-precision value can be obtained with one
of the following functions:

  xsum_small_round (pointer_to_small_accumulator)
  xsum_large_round (pointer_to_large_accumulator)

The value stored in the superaccumulator is not changed by these
functions.  Additional values can be added to the superaccumulator,
and then the result of rounding it can again be obtained, etc.


Other operations on superaccumulators.

Values stored in a superaccumulator can be negated with the following
procedures:

  xsum_small_negate (pointer_to_small_accumulator)
  xsum_large_negate (pointer_to_large_accumulator)

The value in one small or large accumulator can be added to another
of the same type with the following procedures:

  xsum_small_add_accumulator (pointer_to_destination_accumulator,
                              pointer_to_source_accumulator)
  xsum_large_add_accumulator (pointer_to_destination_accumulator,
                              pointer_to_source_accumulator)

The value in the destination is modified by adding the value in the
source; the value in the source is not changed.  The source and
destination may be the same, in which case it is added to itself.

The value in a large superaccumulator can be stored in a small
superaccumulator, or vice versa, with the following procedures:

  xsum_large_to_small_accumulator (pointer_to_small_accumulator,
                                   pointer_to_large_accumulator)
  xsum_small_to_large_accumulator (pointer_to_large_accumulator,
                                   pointer_to_small_accumulator)

The value in the second accumulator is stored in the first
accumulator, replacing any value it previously contained.  The first
accumulator need not have been initialized.  The value in the second
accumulator is not changed.

A small or large superaccumulator can be copied by simply assigning it
to another variable of the same type.


Handling of overflow.

Adding +Inf, -Inf, or a NaN to a superaccumulator will produce a
non-finite result in accordance with the usual rules for IEEE
floating-point arithmetic.  Negative zero is not representable,
and is never returned as a rounded result.

The superaccumulators can represent numbers of larger size than IEEE
double-precision values.  Adding finite double-precision values to a
superaccumulator can result in it overflowing only if at least 2^45
values are added - so a vector of double-precision values whose sum
overflows a superaccumulator would occupy at least 256 Terabytes of
memory.  

Rounding a superaccumulator value to a double-precision value can
produce overflow even when the superaccumulator itself has not
overflowed.  When overflow of the superaccumulator does not occur, the
order in which values are summed has no effect on the result - in
particular, the rounded result of summing a vector will be finite if
the true sum is finite, even if some intermediate sums would overflow
with IEEE double-precision arithmetic.

However, overflow of a superaccumulator can occur more easily with
operations such as adding a superaccumulator repeatedly to itself.
When overflow occurs, the value is set to a NaN (with payload of all
1s), rather than attempt to produce a +Inf or -Inf value (which could
be sensitive to the order of summation).  Such overflows are best
regarded as errors.


Other procedures.

Some additional procedures are declared in xsum.h and implemented in
xsum.c.  They are mainly meant for debugging and for producing results
in the paper.


Example programs.

The programs in 'example-small.c' and 'example-large.c' illustrate
simple uses of some of the routines.  See the comments in the source
files for how to compile them.
